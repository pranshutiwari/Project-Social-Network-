knitr::opts_chunk$set(echo = TRUE)
library(UserNetR)
library(statnet)
library(intergraph)
library(igraph)
faci<-data("Facebook")
library(ergmharris)
library(RColorBrewer)
class(faci)

p0=asNetwork(Facebook)
summary(p0,print.adj = FALSE)
pi=asIgraph(p0)

class(pi)
summary(p0)
library(igraph)
#Making uni-directed 
pi2=as.undirected(pi, mode = "collapse")
p=asNetwork(pi2)
#Fairly complex network as I can see different functional properties per each node and different nodes are connected
plot(p)
class(p)
summary(p)

detach("package:igraph")
list.vertex.attributes(p)
p3=as.sociomatrix(p)

class(as.sociomatrix(p))
summary(p,print.adj = FALSE)
gplot(p,vertex.col=2,displaylabels = FALSE,main="Original Facebook Data")
p%v%'vertex.names'
degree(p,gmode="graph")
Close=closeness(p,gmode="graph")
Between=betweenness(p,gmode="graph")
Degree=degree(p,gmode="graph")
df<-data.frame(Close,Between,Degree)
row.names(df)<-p%v%"vertex.names"
df.sort<-df[order(-df$Degree),]
df.sort

par(mfrow=c(1,2))
#Displaying Data
gplot(p,vertex.col='lightblue',displaylabels = TRUE,vertex.cex=1.3,label.cex=0.4,label.pos=5,displayisolates = TRUE,usearrows = FALSE,main='Original Facebook Data')
library(igraph)
p
pcopy<-pi
vectorpoints<-isolates(p)
class(pcopy)
#Delete Isolates and coerce into existing pcopy which is igraph object
delete.vertices(pcopy,vectorpoints)
#Removing Isolates we get a network object of p copy whic is called pnew3
pcopyi<-asNetwork(pcopy)
#Network copy of pcopy which does not have isolates
gplot(pcopyi,usearrows = FALSE)
#Now lets calcualte betweenness,closeness
detach("package:igraph")
degree(pcopyi,gmode="graph")
Close=closeness(pcopyi,gmode="graph")
Between=betweenness(pcopyi,gmode="graph")
Degree=degree(pcopyi,gmode="graph")
df<-data.frame(Close,Between,Degree)
row.names(df)<-pcopyi%v%"vertex.names"
df.sort<-df[order(-df$Degree),]
df.sort
#Has Friends counts any thing to do with links?
library(igraph)
summary(pcopyi)
countfriends<-as.numeric(get.vertex.attribute(pcopy,"friend_count"))
countfriends
dfvertices<-as_data_frame(pcopy,what='vertices')
mycol<-brewer.pal(5,"Dark2")
par(mfrow=c(1,1))
library(igraph)
pcopyvertex<-as_data_frame(pcopy,what='vertices')
pcopynode<-as_data_frame(pcopy,what='edges')
write.csv(pcopyvertex,file="Vertex_fb.csv")#Verticeswrite.csv(lhdsi.e.df,file="lhds_e.csv") #Edges
write.csv(pcopynode,file="edge_fb.csv")#edge
pcopyvertex
detach("package:igraph")
library(RColorBrewer)
mycol<-brewer.pal(5,"Dark2")
sexfactor<-as.factor(get.vertex.attribute(pcopyi,"sex"))
plot(pcopyi,usearrows=FALSE,vertex.cex=1,edge.lwd=0,edge.col = "grey25",displaylabels = FALSE,vertex.col = mycol[sexfactor],main='Facebook Data')
legend("topright",legend=c("female",'male'),col=mycol,pch=19,pt.cex=2)
#Lets analyze things
library(intergraph)
library(igraph)
coreness<-graph.coreness(pcopy)
coreness
maxc=max(coreness)
V(pcopy)$col<-coreness+1
print(maxc)
plot(pcopy,vertex.cex=0.6,main='Facebook Data')
table(coreness)
colors<-rainbow(maxc)
plot(pcopy,vertex.label=coreness,vertex.color=colors[coreness])
pcopy2<-pcopy#To create a copy of network so that we can use that in creaitng sub graphs
pcopy2_11=induced.subgraph(pcopy2,vids = which(coreness>11))
pcopy2_10=induced.subgraph(pcopy2,vids = which(coreness>10))
pcopy2_9=induced.subgraph(pcopy2,vids = which(coreness>9))
pcopy2_6=induced.subgraph(pcopy2,vids = which(coreness>6))
pcopy2_4=induced.subgraph(pcopy2,vids = which(coreness>4))
par(mfrow=c(2,2))
plot(pcopy2_11,vertex.label.size=0.8,vertex.cex=4,main='SubGraph with Degree>12')
get.vertex.attribute(pcopy2_11,name="vertex.names")
plot(pcopy2_10,main='Sub Graph with Degree>10')
plot(pcopy2_9,main='Sub Graph with Degree>9')
plot(pcopy2_6,main='Sub Graph with Degree>6')
par(mfrow=c(1,1))
df$coreness<-coreness
df
#we add coreness to existing data fram of vertexhead(pcopyvertex) property
analysis1<-data.frame(pcopyvertex,coreness,Degree)

analysis1$Degree<-as.numeric(analysis1$Degree)
analysis1$friend_count<-as.numeric(analysis1$friend_count)
analysis1$group<-as.numeric(factor(analysis1$group))
summary(analysis1$Degree)
dev.off()
library(ggplot2)
plot1=ggplot(analysis1,aes(Degree,friend_count))+geom_point(aes(color=sex))+theme_bw(base_family = "Times")+theme(plot.title=element_text(size=10))+labs(title='Node Degree Analysis')
plot2=ggplot(analysis1,aes(Degree,sex))+geom_point(aes(color=factor(group)))+theme_bw(base_family = "Times")+theme(plot.title=element_text(size=10))+labs(title='Node Degree Analysis  ',x='Degree of Nodes',y='Sex Group ',caption = 'Figure ; Source:Duke Facebook Network Analysis')
plot1+scale_y_continuous(breaks = seq(0, 1000,by= 200))
plot2

#Above plot shows no solid relation and hence moving to modularity function
library(intergraph)
library(igraph)
table(V(pcopy)$sex)
group<-as.numeric(factor(V(pcopy)$group))
#Modularity of Group
n=modularity(pcopy,group)
n
m=modularity(pcopy,sexfactor)
m
cw=cluster_walktrap(pcopy)
membership(cw)
modularity(cw)
plot(cw,pcopy,main='Community Detection')
pcopyedges<-as_data_frame(pcopy,what="edges") 
pcopyedges
null=ergm(pcopyi~edges)
grp<-as.numeric(factor(V(Facebook)$group))
class(Facebook)
modgp<-modularity(Facebook,grp)
mod<-modularity(Facebook,sexfactor)
mod

null=ergm(pcopyi~edges)
summary(null)
plogis(coef(null))
model1=ergm(pcopyi~edges+nodefactor('group'))
summary(model1)
model2=ergm(pcopyi~edges+nodefactor('sex'))
summary(model2)
model3=ergm(pcopyi~edges+nodefactor('group')+nodefactor('sex'))
summary(model3)
model4=ergm(pcopyi~edges+nodefactor('group')+nodefactor('sex')+nodefactor('relationship_status'))
summary(model4)
probability1<-plogis(coef(model1)[1])
probability1

# Examine the probability that person of tie who belong to Group F and is male is 

probability3<-plogis(coef(model3)[1]+coef(model3)[3]+coef(model3)[9])

#Other Probabilites 
probability4<-plogis(coef(model4)[1]+coef(model4)[2]+coef(model4)[3])
probability1
probability3
probability4

#Lets analyze the data for Corness >12 which s high dense group and see what our analysis 
pcopy2_11=induced.subgraph(pcopy2,vids = which(coreness>11))
class(pcopy2_11)
pcopy2_11.net<-asNetwork(pcopy2_11)
#Model5
model5=ergm(pcopy2_11.net~edges+nodefactor('group')+nodefactor('sex')+nodefactor('relationship_status'))
summary(model5)
# Lets find the probability that person will join the friends with 12 degrees  who are both  male and Married 
probability5<-plogis(coef(model5)[1]+coef(model5)[2]+coef(model5)[4])
probability5
gplot(pcopy2_11.net,vertex.col='lightblue',displaylabels = TRUE,vertex.cex=1,label.cex=0.2,label.pos=3,displayisolates = TRUE,usearrows = FALSE,main='Sub Graph with Highest k COre(12)')
```

## R Markdown

This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.

When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
  
  ```{r cars}
library(UserNetR)
library(statnet)
library(intergraph)
library(igraph)
faci<-data("Facebook")
library(ergmharris)
library(RColorBrewer)
class(faci)

p0=asNetwork(Facebook)
summary(p0,print.adj = FALSE)
pi=asIgraph(p0)

class(pi)
summary(p0)
library(igraph)
#Making uni-directed 
pi2=as.undirected(pi, mode = "collapse")
p=asNetwork(pi2)
#Fairly complex network as I can see different functional properties per each node and different nodes are connected
plot(p)
class(p)
summary(p)

detach("package:igraph")
list.vertex.attributes(p)
p3=as.sociomatrix(p)

class(as.sociomatrix(p))
summary(p,print.adj = FALSE)
gplot(p,vertex.col=2,displaylabels = FALSE,main="Original Facebook Data")
p%v%'vertex.names'
degree(p,gmode="graph")
Close=closeness(p,gmode="graph")
Between=betweenness(p,gmode="graph")
Degree=degree(p,gmode="graph")
df<-data.frame(Close,Between,Degree)
row.names(df)<-p%v%"vertex.names"
df.sort<-df[order(-df$Degree),]
df.sort

par(mfrow=c(1,2))
#Displaying Data
gplot(p,vertex.col='lightblue',displaylabels = TRUE,vertex.cex=1.3,label.cex=0.4,label.pos=5,displayisolates = TRUE,usearrows = FALSE,main='Original Facebook Data')
library(igraph)
p
pcopy<-pi
vectorpoints<-isolates(p)
class(pcopy)
#Delete Isolates and coerce into existing pcopy which is igraph object
delete.vertices(pcopy,vectorpoints)
#Removing Isolates we get a network object of p copy whic is called pnew3
pcopyi<-asNetwork(pcopy)
#Network copy of pcopy which does not have isolates
gplot(pcopyi,usearrows = FALSE,main='Network after removing Isolates')
#Now lets calcualte betweenness,closeness
detach("package:igraph")
degree(pcopyi,gmode="graph")
Close=closeness(pcopyi,gmode="graph")
Between=betweenness(pcopyi,gmode="graph")
Degree=degree(pcopyi,gmode="graph")
df<-data.frame(Close,Between,Degree)
row.names(df)<-pcopyi%v%"vertex.names"
df.sort<-df[order(-df$Degree),]
df.sort
#Has Friends counts any thing to do with links?
library(igraph)
summary(pcopyi)
countfriends<-as.numeric(get.vertex.attribute(pcopy,"friend_count"))
countfriends
dfvertices<-as_data_frame(pcopy,what='vertices')
mycol<-brewer.pal(5,"Dark2")
par(mfrow=c(1,1))
library(igraph)
pcopyvertex<-as_data_frame(pcopy,what='vertices')
pcopynode<-as_data_frame(pcopy,what='edges')
write.csv(pcopyvertex,file="Vertex_fb.csv")#Verticeswrite.csv(lhdsi.e.df,file="lhds_e.csv") #Edges
write.csv(pcopynode,file="edge_fb.csv")#edge
pcopyvertex
detach("package:igraph")
library(RColorBrewer)
mycol<-brewer.pal(5,"Dark2")
sexfactor<-as.factor(get.vertex.attribute(pcopyi,"sex"))
plot(pcopyi,usearrows=FALSE,vertex.cex=1,edge.lwd=0,edge.col = "grey25",displaylabels = FALSE,vertex.col = mycol[sexfactor],main='Facebook Data')
legend("topright",legend=c("female",'male'),col=mycol,pch=19,pt.cex=2)
#Lets analyze things
library(intergraph)
library(igraph)
coreness<-graph.coreness(pcopy)
coreness
maxc=max(coreness)
V(pcopy)$col<-coreness+1
print(maxc)
plot(pcopy,vertex.cex=0.6,main='Facebook Data')
table(coreness)
colors<-rainbow(maxc)
plot(pcopy,vertex.label=coreness,vertex.color=colors[coreness],main='kcore analysis')
pcopy2<-pcopy#To create a copy of network so that we can use that in creaitng sub graphs
pcopy2_11=induced.subgraph(pcopy2,vids = which(coreness>11))
pcopy2_10=induced.subgraph(pcopy2,vids = which(coreness>10))
pcopy2_9=induced.subgraph(pcopy2,vids = which(coreness>9))
pcopy2_6=induced.subgraph(pcopy2,vids = which(coreness>6))
pcopy2_4=induced.subgraph(pcopy2,vids = which(coreness>4))
par(mfrow=c(2,2))
plot(pcopy2_11,vertex.label.size=0.8,vertex.cex=4,main='SubGraph with Degree>12')
get.vertex.attribute(pcopy2_11,name="vertex.names")
plot(pcopy2_10,main='Sub Graph with Degree>10')
plot(pcopy2_9,main='Sub Graph with Degree>9')
plot(pcopy2_6,main='Sub Graph with Degree>6')
par(mfrow=c(1,1))
df$coreness<-coreness
df
#we add coreness to existing data fram of vertexhead(pcopyvertex) property
analysis1<-data.frame(pcopyvertex,coreness,Degree)

analysis1$Degree<-as.numeric(analysis1$Degree)
analysis1$friend_count<-as.numeric(analysis1$friend_count)
analysis1$group<-as.numeric(factor(analysis1$group))
summary(analysis1$Degree)
dev.off()
library(ggplot2)
plot1=ggplot(analysis1,aes(Degree,friend_count))+geom_point(aes(color=sex))+theme_bw(base_family = "Times")+theme(plot.title=element_text(size=10))+labs(title='Node Degree Analysis')
plot2=ggplot(analysis1,aes(Degree,sex))+geom_point(aes(color=factor(group)))+theme_bw(base_family = "Times")+theme(plot.title=element_text(size=10))+labs(title='Node Degree Analysis  ',x='Degree of Nodes',y='Sex Group ',caption = 'Figure ; Source:Duke Facebook Network Analysis')
plot1+scale_y_continuous(breaks = seq(0, 1000,by= 200))
plot2

#Above plot shows no solid relation and hence moving to modularity function
library(intergraph)
library(igraph)
table(V(pcopy)$sex)
group<-as.numeric(factor(V(pcopy)$group))
#Modularity of Group
n=modularity(pcopy,group)
n
m=modularity(pcopy,sexfactor)
m
cw=cluster_walktrap(pcopy)
membership(cw)
k=modularity(cw)
k
plot(cw,pcopy,main='Community Detection')
pcopyedges<-as_data_frame(pcopy,what="edges") 
pcopyedges
null=ergm(pcopyi~edges)
grp<-as.numeric(factor(V(Facebook)$group))
class(Facebook)
modgp<-modularity(Facebook,grp)
mod<-modularity(Facebook,sexfactor)
mod

null=ergm(pcopyi~edges)
summary(null)
plogis(coef(null))
summary(pcopyi)
model1=ergm(pcopyi~edges+nodefactor('group'))
summary(model1)
model2=ergm(pcopyi~edges+nodefactor('sex'))
summary(model2)
model3=ergm(pcopyi~edges+nodefactor('group')+nodefactor('sex'))
summary(model3)
model4=ergm(pcopyi~edges+nodefactor('group')+nodefactor('sex')+nodefactor('relationship_status'))
summary(model4)
probability1<-plogis(coef(model1)[1])
probability1

# Examine the probability that person of tie who belong to Group F and is male is 

probability3<-plogis(coef(model3)[1]+coef(model3)[3]+coef(model3)[9])

#Other Probabilites 
probability4<-plogis(coef(model4)[1]+coef(model4)[2]+coef(model4)[3])
probability1
probability3
probability4

#Lets analyze the data for Corness >12 which s high dense group and see what our analysis 
pcopy2_11=induced.subgraph(pcopy2,vids = which(coreness>11))
class(pcopy2_11)
pcopy2_11.net<-asNetwork(pcopy2_11)
#Model5
model5=ergm(pcopy2_11.net~edges+nodefactor('group')+nodefactor('sex')+nodefactor('relationship_status'))
summary(model5)
# Lets find the probability that person will join the friends with 12 degrees  who are both  male and Married 
probability5<-plogis(coef(model5)[1]+coef(model5)[2]+coef(model5)[4])
probability5
gplot(pcopy2_11.net,vertex.col='lightblue',displaylabels = TRUE,vertex.cex=1,label.cex=0.2,label.pos=3,displayisolates = TRUE,usearrows = FALSE,main='Sub Graph with Highest k COre(12)')
